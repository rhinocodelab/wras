#!/usr/bin/env python3
"""
Script to update announcement templates with multilingual versions
"""

import sqlite3
import json

def update_announcement_templates():
    """Update announcement templates with multilingual versions"""
    print("ЁЯЪА Updating Announcement Templates with Multilingual Versions...")
    print("=" * 60)
    
    # Connect to database
    db_path = "wras_dhh.db"
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # Multilingual templates data
        templates_data = {
            'arriving': {
                'en': "Attention Please! Train number {train_number} {train_name} from {start_station} to {end_station} is arriving at platform number {platform}",
                'hi': "рдХреГрдкрдпрд╛ рдзреНрдпрд╛рди рджреЗрдВ! рдЯреНрд░реЗрди рд╕рдВрдЦреНрдпрд╛ {train_number} {train_name} {start_station} рд╕реЗ {end_station} рдХреЗ рд▓рд┐рдП рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рд╕рдВрдЦреНрдпрд╛ {platform} рдкрд░ рдЖ рд░рд╣реА рд╣реИ",
                'mr': "рдХреГрдкрдпрд╛ рд▓рдХреНрд╖ рджреНрдпрд╛! рдЯреНрд░реЗрди рдХреНрд░рдорд╛рдВрдХ {train_number} {train_name} {start_station} рддреЗ {end_station} рдкреНрд▓реЕрдЯрдлреЙрд░реНрдо рдХреНрд░рдорд╛рдВрдХ {platform} рд╡рд░ рдпреЗрдд рдЖрд╣реЗ",
                'gu': "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркзрлНркпрк╛рки ркЖрккрлЛ! ркЯрлНрк░рлЗрки ркиркВркмрк░ {train_number} {train_name} {start_station}ркерлА {end_station} ркорк╛ркЯрлЗ рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко ркиркВркмрк░ {platform} рккрк░ ркЖрк╡рлА рк░рк╣рлА ркЫрлЗ"
            },
            'delay': {
                'en': "Attention Please! Train number {train_number} {train_name} from {start_station} to {end_station} is running late. We apologize for the inconvenience.",
                'hi': "рдХреГрдкрдпрд╛ рдзреНрдпрд╛рди рджреЗрдВ! рдЯреНрд░реЗрди рд╕рдВрдЦреНрдпрд╛ {train_number} {train_name} {start_station} рд╕реЗ {end_station} рдХреЗ рд▓рд┐рдП рдЪрд▓ рд░рд╣реА рд╣реИред рд╣рдореЗрдВ рд╣реБрдИ рдЕрд╕реБрд╡рд┐рдзрд╛ рдХреЗ рд▓рд┐рдП рдЦреЗрдж рд╣реИред",
                'mr': "рдХреГрдкрдпрд╛ рд▓рдХреНрд╖ рджреНрдпрд╛! рдЯреНрд░реЗрди рдХреНрд░рдорд╛рдВрдХ {train_number} {train_name} {start_station} рддреЗ {end_station} рдЙрд╢рд┐рд░рд╛ рдЖрд╣реЗ. рдЭрд╛рд▓реЗрд▓реНрдпрд╛ рдЧреИрд░рд╕реЛрдпреАрдмрджреНрджрд▓ рдЖрдореНрд╣реА рдХреНрд╖рдорд╕реНрд╡ рдЖрд╣реЛрдд",
                'gu': "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркзрлНркпрк╛рки ркЖрккрлЛ! ркЯрлНрк░рлЗрки ркиркВркмрк░ {train_number} {train_name} {start_station}ркерлА {end_station} ркорк╛ркЯрлЗ ркорлЛркбрлЗ ркЪрк╛рк▓рлА рк░рк╣рлА ркЫрлЗ. ркЕркЧрк│ ркеркпрлЗрк▓рлА ркЕрк╕рлБрк╡рк┐ркзрк╛ ркорк╛ркЯрлЗ ркХрлНрк╖ркорк╛ ркХрк░рк╢рлЛ"
            },
            'cancelled': {
                'en': "Attention Please! Train number {train_number} {train_name} from {start_station} to {end_station} scheduled for today has been cancelled. We apologize for the inconvenience",
                'hi': "рдХреГрдкрдпрд╛ рдзреНрдпрд╛рди рджреЗрдВ! рдЖрдЬ рдХреА рдЯреНрд░реЗрди рд╕рдВрдЦреНрдпрд╛ {train_number} {train_name} {start_station} рд╕реЗ {end_station} рдХреЗ рд▓рд┐рдП рд░рджреНрдж рдХрд░ рджреА рдЧрдИ рд╣реИ. рд╣рдореЗрдВ рд╣реБрдИ рдЕрд╕реБрд╡рд┐рдзрд╛ рдХреЗ рд▓рд┐рдП рдЦреЗрдж рд╣реИред",
                'mr': "рдХреГрдкрдпрд╛ рд▓рдХреНрд╖ рджреНрдпрд╛! рдЖрдЬрдЪреА рдЯреНрд░реЗрди рдХреНрд░рдорд╛рдВрдХ {train_number} {train_name} {start_station} рддреЗ {end_station} рд░рджреНрдж рдХрд░рдгреНрдпрд╛рдд рдЖрд▓реА рдЖрд╣реЗ. рдЭрд╛рд▓реЗрд▓реНрдпрд╛ рдЧреИрд░рд╕реЛрдпреАрдмрджреНрджрд▓ рдЖрдореНрд╣реА рдХреНрд╖рдорд╕реНрд╡ рдЖрд╣реЛрдд",
                'gu': "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркзрлНркпрк╛рки ркЖрккрлЛ! ркЖркЬркирлА ркЯрлНрк░рлЗрки ркиркВркмрк░ {train_number} {train_name} {start_station}ркерлА {end_station} ркорк╛ркЯрлЗ рк░ркж ркХрк░рлА ркжрлЗрк╡рк╛ркорк╛ркВ ркЖрк╡рлА ркЫрлЗ. ркЕркЧрк│ ркеркпрлЗрк▓рлА ркЕрк╕рлБрк╡рк┐ркзрк╛ ркорк╛ркЯрлЗ ркХрлНрк╖ркорк╛ ркХрк░рк╢рлЛ"
            },
            'platform_change': {
                'en': "Attention Please! The platform for train number {train_number} {train_name} from {start_station} to {end_station} has been changed to platform number {platform}.",
                'hi': "рдХреГрдкрдпрд╛ рдзреНрдпрд╛рди рджреЗрдВ! рдЯреНрд░реЗрди рд╕рдВрдЦреНрдпрд╛ {train_number} {train_name} {start_station} рд╕реЗ {end_station} рдХреЗ рд▓рд┐рдП рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рдмрджрд▓рдХрд░ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рд╕рдВрдЦреНрдпрд╛ {platform} рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ",
                'mr': "рдХреГрдкрдпрд╛ рд▓рдХреНрд╖ рджреНрдпрд╛! рдЯреНрд░реЗрди рдХреНрд░рдорд╛рдВрдХ {train_number} {train_name} {start_station} рддреЗ {end_station} рдЪрд╛ рдкреНрд▓реЕрдЯрдлреЙрд░реНрдо рдмрджрд▓реВрди рдкреНрд▓реЕрдЯрдлреЙрд░реНрдо рдХреНрд░рдорд╛рдВрдХ {platform} рдХрд░рдгреНрдпрд╛рдд рдЖрд▓рд╛ рдЖрд╣реЗ",
                'gu': "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркзрлНркпрк╛рки ркЖрккрлЛ! ркЯрлНрк░рлЗрки ркиркВркмрк░ {train_number} {train_name} {start_station}ркерлА {end_station} ркорк╛ркЯрлЗ рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко ркиркВркмрк░ ркмркжрк▓рлАркирлЗ {platform} ркХрк░рлА ркжрлЗрк╡рк╛ркорк╛ркВ ркЖрк╡рлА ркЫрлЗ"
            }
        }
        
        templates_updated = 0
        templates_created = 0
        
        for category_code, languages in templates_data.items():
            print(f"\nЁЯУЭ Processing category: {category_code}")
            
            # Get category ID
            cursor.execute("SELECT id FROM announcement_categories WHERE category_code = ?", (category_code,))
            category_result = cursor.fetchone()
            
            if not category_result:
                print(f"тЭМ Category '{category_code}' not found!")
                continue
                
            category_id = category_result[0]
            
            for language_code, template_text in languages.items():
                # Check if template already exists
                cursor.execute(
                    "SELECT id FROM announcement_templates WHERE category_id = ? AND language_code = ?",
                    (category_id, language_code)
                )
                existing_template = cursor.fetchone()
                
                if existing_template:
                    # Update existing template
                    cursor.execute(
                        "UPDATE announcement_templates SET template_text = ? WHERE id = ?",
                        (template_text, existing_template[0])
                    )
                    templates_updated += 1
                    print(f"   тЬЕ Updated {language_code} template")
                else:
                    # Insert new template
                    cursor.execute(
                        "INSERT INTO announcement_templates (category_id, language_code, template_text) VALUES (?, ?, ?)",
                        (category_id, language_code, template_text)
                    )
                    templates_created += 1
                    print(f"   тЬЕ Created {language_code} template")
        
        conn.commit()
        
        print("\n" + "=" * 60)
        print(f"тЬЕ Templates Update Complete!")
        print(f"   Templates updated: {templates_updated}")
        print(f"   Templates created: {templates_created}")
        print(f"   Total templates: {templates_updated + templates_created}")
        
        # Show summary of all templates
        print("\nЁЯУЛ Current Templates Summary:")
        cursor.execute("""
            SELECT ac.category_code, at.language_code, at.template_text 
            FROM announcement_templates at 
            JOIN announcement_categories ac ON at.category_id = ac.id 
            ORDER BY ac.id, at.language_code
        """)
        
        templates = cursor.fetchall()
        for template in templates:
            category_code, language_code, template_text = template
            print(f"   {category_code} ({language_code}): {template_text[:50]}...")
        
    except Exception as e:
        conn.rollback()
        print(f"тЭМ Error: {str(e)}")
    finally:
        conn.close()
    
    print("\n" + "=" * 60)
    print("тЬЕ Announcement Templates Update Completed!")

if __name__ == "__main__":
    update_announcement_templates() 